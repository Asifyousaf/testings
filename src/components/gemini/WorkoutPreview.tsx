
import React, { useState } from 'react';
import { Dumbbell, Layers, Plus, ChevronDown, ChevronUp, Clock, Flame } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';

interface WorkoutPreviewProps {
  workoutData: any[];
  onAddWorkout?: (workout: any) => void;
  onAddWorkoutPack?: (workouts: any[]) => void;
}

const WorkoutPreview: React.FC<WorkoutPreviewProps> = ({ workoutData, onAddWorkout, onAddWorkoutPack }) => {
  const [open, setOpen] = useState(false);
  
  if (!workoutData || workoutData.length === 0) return null;
  
  // Default workout image
  const defaultWorkoutImage = "https://images.unsplash.com/photo-1517836357463-d25dfeac3438?q=80&w=2340&q=80";
  
  // Ensure workout data has all necessary fields
  const enhancedWorkoutData = workoutData.map(workout => ({
    ...workout,
    title: workout.title || workout.name || "Untitled Exercise",
    type: workout.type || "General",
    duration: workout.duration || 30,
    calories_burned: workout.calories_burned || 300,
    exercises: workout.exercises || [],
    image: workout.image || defaultWorkoutImage
  }));
  
  const totalDuration = enhancedWorkoutData.reduce((total, workout) => total + (workout.duration || 30), 0);
  const totalCalories = enhancedWorkoutData.reduce((total, workout) => total + (workout.calories_burned || 300), 0);
  
  return (
    <Card className="border-2 border-purple-100">
      <CardHeader className="pb-2">
        <div className="flex justify-between items-center">
          <CardTitle className="text-lg flex items-center">
            <Dumbbell className="mr-2 h-5 w-5 text-purple-600" />
            AI Workout {enhancedWorkoutData.length > 1 ? 'Pack' : 'Plan'}
          </CardTitle>
          {enhancedWorkoutData.length > 1 && (
            <Badge variant="outline" className="bg-purple-50 text-purple-700">
              {enhancedWorkoutData.length} workouts
            </Badge>
          )}
        </div>
        <CardDescription>
          Personalized workout {enhancedWorkoutData.length > 1 ? 'pack' : 'plan'} generated by AI
        </CardDescription>
      </CardHeader>
      
      <CardContent className="text-sm">
        <div className="flex justify-between items-center mb-4">
          <div className="flex items-center">
            <Clock className="h-4 w-4 text-purple-600 mr-1" />
            <span>Approx. {totalDuration} mins</span>
          </div>
          <div className="flex items-center">
            <Flame className="h-4 w-4 text-orange-600 mr-1" />
            <span>~{totalCalories} calories</span>
          </div>
        </div>
        
        <Collapsible open={open} onOpenChange={setOpen} className="bg-purple-50 rounded-md">
          <CollapsibleTrigger asChild>
            <Button variant="ghost" className="flex justify-between w-full text-purple-700 p-3 hover:bg-purple-100">
              <span className="font-medium">
                {open ? 'Hide details' : 'View workout details'}
              </span>
              {open ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
            </Button>
          </CollapsibleTrigger>
          <CollapsibleContent className="p-3 pt-0">
            {enhancedWorkoutData.map((workout, index) => (
              <div key={index} className="border-b border-purple-100 pb-3 mb-3 last:border-b-0 last:mb-0 last:pb-0">
                <div className="font-medium mb-1 text-purple-800 text-base">{workout.title || `Workout ${index + 1}`}</div>
                <div className="text-xs text-gray-600 mb-2">
                  {workout.type || 'General'} • ~{workout.duration || 30} mins • ~{workout.calories_burned || 300} calories
                </div>
                <div className="text-xs">
                  {Array.isArray(workout.exercises) ? (
                    <ul className="list-disc list-inside">
                      {workout.exercises.slice(0, 3).map((exercise: any, i: number) => (
                        <li key={i} className="text-gray-600 mb-1">
                          <span className="font-medium text-gray-700">{exercise.name || exercise.title || `Exercise ${i + 1}`}</span>
                          {exercise.sets && exercise.reps && (
                            <span className="text-gray-500"> • {exercise.sets} sets × {exercise.reps} reps</span>
                          )}
                        </li>
                      ))}
                      {workout.exercises.length > 3 && (
                        <li className="text-gray-500">+{workout.exercises.length - 3} more exercises</li>
                      )}
                    </ul>
                  ) : (
                    <div className="text-gray-500 italic">Exercise details not available</div>
                  )}
                </div>
              </div>
            ))}
          </CollapsibleContent>
        </Collapsible>
      </CardContent>
      
      <CardFooter className="flex justify-between pt-0">
        {onAddWorkoutPack && enhancedWorkoutData.length > 1 && (
          <Button
            onClick={() => onAddWorkoutPack(enhancedWorkoutData)}
            className="w-full bg-purple-600 hover:bg-purple-700 text-white"
          >
            <Layers className="h-4 w-4 mr-2" />
            Add as Workout Pack
          </Button>
        )}
        
        {onAddWorkout && (enhancedWorkoutData.length === 1 || !onAddWorkoutPack) && (
          <Button
            onClick={() => onAddWorkout(enhancedWorkoutData[0])}
            className="w-full bg-purple-600 hover:bg-purple-700 text-white"
          >
            <Plus className="h-4 w-4 mr-2" />
            Add to My Workouts
          </Button>
        )}
      </CardFooter>
    </Card>
  );
};

export default WorkoutPreview;
